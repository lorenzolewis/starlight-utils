---
import config from "virtual:starlight-utils/config";
import type { StarlightRouteData } from "@astrojs/starlight/route-data";
import { AstroError } from "astro/errors";
import Dropdown from "./Dropdown.astro";
import HorizontalList from "./HorizontalList.astro";
import Default from "@astrojs/starlight/components/Sidebar.astro";

export type SidebarData = {
  isCurrentSidebar: boolean;
  starlightProps: StarlightRouteData;
  labelEntry: StarlightRouteData["sidebar"][number];
};

// Styles and CSS logic derived from https://daisyui.com/components/collapse/

// This Sidebar override uses the top-level items from the Starlight sidebar config to create sidebars.

// Go through each top-level sidebar item from the Astro config to...
// 1. Validate the config is set up correctly
// 2. Create a new derived set of `Astro.props` that only contains one set of sidebar entries
// 3. Check if the current page being rendered is current page to determine if this sidebar group should be selected

const strippedSidebar = Astro.locals.starlightRoute.sidebar.filter((entry) => {
  if (config?.navLinks?.leading?.useSidebarLabelled === entry.label) {
    return false;
  }
  return true;
});

const strippedProps: Props = { ...Astro.props, sidebar: strippedSidebar };

const multiSidebarData: Array<SidebarData> = strippedProps.sidebar.map(
  (entry) => {
    if (entry.type !== "group") {
      throw new AstroError(
        `\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
      );
    }

    // Recursively check if a group of sidebar entries contains the current page
    const findIfIsCurrent = (
      entry: (typeof Astro.props.sidebar)[number]
    ): boolean => {
      if (entry.type === "link") {
        return entry.isCurrent;
      }
      return entry.entries.some((item) => findIfIsCurrent(item));
    };

    const isCurrentPage = findIfIsCurrent(entry);

    return {
      isCurrentSidebar: isCurrentPage,
      starlightProps: { ...Astro.props, sidebar: [...entry.entries] },
      labelEntry: entry,
    };
  }
);

// If the current page being built is not on a sidebar then set the first sidebar to be shown
if (
  multiSidebarData[0] &&
  !multiSidebarData.some(({ isCurrentSidebar }) => isCurrentSidebar)
) {
  multiSidebarData[0].isCurrentSidebar = true;
}
---

{
  config?.multiSidebar ? (
    <>
      {config.multiSidebar.switcherStyle === "dropdown" && (
        <Dropdown starlightProps={strippedProps} {multiSidebarData} />
      )}
      {config.multiSidebar.switcherStyle === "horizontalList" && (
        <HorizontalList starlightProps={strippedProps} {multiSidebarData} />
      )}
      {config.multiSidebar.switcherStyle === "hidden" &&
        multiSidebarData.map(
          ({ starlightProps, isCurrentSidebar, labelEntry }) => (
            <div
              hidden={!isCurrentSidebar}
              data-starlight-multi-sidebar-label={labelEntry.label}
            >
              <Default {...starlightProps} />
            </div>
          )
        )}
    </>
  ) : (
    <Default {...strippedProps} />
  )
}
